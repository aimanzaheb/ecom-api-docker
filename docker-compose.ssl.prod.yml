version: "3"
services:
  nginx:
    ports:
      - "80:80"
      - "443:443"
    depends_on: 
        - node-app
        - react-app
    volumes:
      - web-root:/var/www/html #no use because we are serving frontend with other nginx
      - ./nginx/after-ssl.conf:/etc/nginx/conf.d/default.conf
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./nginx/dhparam:/etc/ssl/certs
    command: /bin/sh -c "while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g 'daemon off;'" # ðŸ’¡

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - web-root:/var/www/html
    depends_on:
      - nginx
    # command: certonly --webroot --webroot-path=/var/www/html --email aimanzaheb6@gmail.com --agree-tos --no-eff-email --staging -d zaheb.tk  -d www.zaheb.tk
    entrypoint: /bin/sh -c "trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;" # ðŸ’¡

  react-app:
    image: ecom_react-app
    build: 
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - REACT_APP_HOMEPAGE_PRODUCT_HEADING=Latest Products #not passed as env variable because of multi stage build. It will not work

  node-app:
    deploy:
      replicas: 2
      restart_policy:
        condition: any
      update_config:
        parallelism: 1
        delay: 10s
    build: 
      args:
        IMAGE_ENV: production
    image: aimanzaheb/ecom-api-docker
    environment: 
      - NODE_ENV=production
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
      - PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
    command: node src/server.js
  
  mongo:
    environment: 
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}

volumes:
  certbot-etc:
  certbot-var:
  web-root:
  dhparam:
